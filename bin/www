#!/usr/bin/env node

/**
 * Module dependencies.
 */

const debug = require('debug')('final-project:server');
const http = require('http');
const app = require('../app');
const eventBus = require('../pubsub');
const { connectionMap, roomStorage, Pen } = require('../rooms');
/**
 * Get port from environment and store in Express.
 */

const port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
 * Create HTTP server.
 */

const server = http.createServer(app);

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
    const port = parseInt(val, 10);

    if (isNaN(port)) {
    // named pipe
        return val;
    }

    if (port >= 0) {
    // port number
        return port;
    }

    return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
    if (error.syscall !== 'listen') {
        throw error;
    }

    const bind = typeof port === 'string'
        ? `Pipe ${port}`
        : `Port ${port}`;

    // handle specific listen errors with friendly messages
    switch (error.code) {
    case 'EACCES':
        console.error(`${bind} requires elevated privileges`);
        process.exit(1);
        break;
    case 'EADDRINUSE':
        console.error(`${bind} is already in use`);
        process.exit(1);
        break;
    default:
        throw error;
    }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
    const address = server.address();
    const bind = typeof address === 'string'
        ? `pipe ${address}`
        : `port ${address.port}`;
    debug(`Listening on ${bind}`);
}

/**
 * Web socket implementation
 */
const io = require('socket.io')(server);

function getCreatorSocket(roomName) {
    const room = roomStorage[roomName];
    if (!room) {
        console.error('No room found!');
        return null;
    }
    return connectionMap.getSocket(room.creator);
}

io.on('connection', (socket) => {
    socket.on('disconnect', () => {
    });

    socket.on('disconnecting', (reason) => {
        let userID = connectionMap.getUser(socket.id);

        if (Object.keys(socket.rooms).length > 1) {
            let roomName = Object.keys(socket.rooms)[1];
            let room = roomStorage[roomName];
            if (room) {
                if (userID === room.creator) {
                    socket.to(roomName).emit('room.delete', roomName);
                    socket.to('homePage').emit('homePage.roomDelete', {roomName});
                    delete roomStorage[roomName];
                } else {
                    socket.to(connectionMap.getSocket(room.creator)).emit('settings.userLeft', userID);
                    socket.to(`${room.name}_moderators`).emit('settings.userLeft', userID);
                }
            }
        }
    });

    socket.on('settings.bindID', (user) => {
        connectionMap.registerUser(user.id, socket.id);
    });

    socket.on('homePage.joinRoom', () => {
        socket.join('homePage');
        for (const key in roomStorage) {
            socket.to(getCreatorSocket(key)).emit('creator.sendRoomInformation');
        }
    });

    socket.on('homePage.updatePopulation', (data) => {
        const { roomName, population } = data;
        if (!roomName || !population) return;
        socket.to('homePage').emit('homePage.updateRoomCounter', {
            population, roomName
        });
    });

    socket.on('settings.joinRoom', (data) => {
        socket.join(data.roomName);
        if (`${socket.id}` === `${getCreatorSocket(data.roomName)}`) {
            socket.to('homePage').emit('homePage.updateRoomCounter', { roomName: data.roomName });
        }
        // socket.to('homePage').emit('homepage.updateRoomCounter', {
        //     population: data.population,
        //     roomName: data.roomName,
        //     passworded: data.passworded
        // });
    });

    socket.on('settings.notifyCreator', (data) => {
        const { roomName, user } = data;
        const creatorSocket = getCreatorSocket(roomName);
        if (!creatorSocket) return;
        socket.to(creatorSocket).emit('settings.userJoined', user);
        socket.to(`${roomName}_moderators`).emit('settings.userJoined', user);
    });

    socket.on('creator.helpNeeded', (data) => {
        const { roomName, id } = data;
        const creatorSocket = getCreatorSocket(roomName);
        if (!creatorSocket) return;
        socket.to(creatorSocket).emit('creator.helpNeeded', id);
        socket.to(`${roomName}_moderators`).emit('creator.helpNeeded', id)
    });

    socket.on('creator.broadcastPen', (data) => {
        const { roomName, id, pen, toSave } = data;
        if (toSave) {
            const newPen = new Pen(pen.title, id, pen.id);
            newPen.html = pen.html;
            newPen.css = pen.css;
            newPen.js = pen.js;
            roomStorage[roomName].users[id].push(newPen);
        }
        const creatorSocket = getCreatorSocket(roomName);
        if (!creatorSocket) return;
        socket.to(creatorSocket).emit('creator.updatePens', { id, pen });
        socket.to(`${roomName}_moderators`).emit('creator.updatePens', { id, pen });
    });

    socket.on('creator.switchPen', (data) => {
        const { roomName, id, newPen } = data;
        const creatorSocket = getCreatorSocket(roomName);
        if (!creatorSocket) return;
        socket.to(creatorSocket).emit('creator.switchPen', { id, newPen });
        socket.to(`${roomName}_moderators`).emit('creator.switchPen', { id, newPen });
    });

    socket.on('creator.deletedPen', (data) => {
        const { roomName, id, pen } = data;
        const creatorSocket = getCreatorSocket(roomName);
        if (!creatorSocket) return;
        socket.to(creatorSocket).emit('creator.deletedPen', { id, pen });
        socket.to(`${roomName}_moderators`).emit('creator.deletedPen', { id, pen });
    });

    socket.on('pen.resolveHelp', (data) => {
        const { id, roomName } = data;
        const userSocket = connectionMap.getSocket(id);
        if (!userSocket) return;
        socket.to(userSocket).emit('pen.resolveHelp');
        socket.to(`${roomName}_moderators`).emit('pen.resolveHelp', {id});
        socket.to(getCreatorSocket(roomName)).emit('pen.resolveHelp', {id});
    });

    socket.on('user.kick', (data) => {
        const userID = connectionMap.getSocket(data.userID);
        socket.to(userID).emit('room.delete');
    });

    socket.on('room.isAllowed', (data) => {
        const { roomName, userID } = data;
        const creator = getCreatorSocket(roomName);
        socket.to(creator).emit('room.isAllowed', {userID});
    });

    socket.on('room.accessResponse', (data) => {
        const {userID, response, roomName} = data;
        socket.to('homePage').emit('room.accessResponse', {roomName, response, userID});
    });

    socket.on('pen.change', (data) => {
        const userID = connectionMap.getUser(socket.id);
        const room = roomStorage[data.roomName];
        if (room && `${room.creator}` === `${userID}` && data.pen.title === 'Public') {
            room.publicPen = data.pen;
            // let socketID = userToSocket.get(userID);
            socket.to(room.name).emit('pen.update', { pen: data.pen, positions: data.positions });
            return;
        }

        if (room && data.pen.link) {
            const creatorPens = room.users[userID];
            for (let i = 0; i < creatorPens.length; i++) {
                if (creatorPens[i].id === data.pen.id) {
                    creatorPens[i] = data.pen;
                    break;
                }
            }

            const linkedUserPens = room.users[data.pen.link.userID];
            let found = -1;
            for (let i = 0; i < linkedUserPens.length; i++) {
                if (linkedUserPens[i].id === data.pen.link.penID) {
                    linkedUserPens[i].html = data.pen.html;
                    linkedUserPens[i].css = data.pen.css;
                    linkedUserPens[i].js = data.pen.js;
                    found = i;
                    break;
                }
            }

            if (found !== -1) {
                const destination = connectionMap.getSocket(data.pen.link.userID);
                socket.to(destination).emit('pen.update', {
                    pen: linkedUserPens[found],
                    difference: data.difference,
                    positions: data.positions,
                    rows: data.rows
                });
            }
            return;
        }

        const pens = room.users[userID];
        const creatorSocket = connectionMap.getSocket(room.creator);
        if (!pens) {
            return;
        }
        for (let i = 0; i < pens.length; i++) {
            const pen = pens[i];
            if (pen.id === data.pen.id) {
                pens[i] = data.pen;
                const creatorPens = room.users[room.creator];
                for (let j = 0; j < creatorPens.length; j++) {
                    if (creatorPens[j].link && creatorPens[j].link.penID === data.pen.id) {
                        creatorPens[j].html = data.pen.html;
                        creatorPens[j].css = data.pen.css;
                        creatorPens[j].js = data.pen.js;
                        creatorPens[j].title = data.pen.title;
                        break;
                    }
                }
                if (pen.title !== 'Public') {
                    const information = {
                        id: userID,
                        pen: pens[i],
                        difference: data.difference,
                        positions: data.positions,
                        rows: data.rows
                    };
                    socket.to(creatorSocket).emit('creator.updatePens', information);
                    socket.to(`${room.name}_moderators`).emit('creator.updatePens', information);
                }
            }
        }
    });

    socket.on('moderator.updatePensOnServer', (data) => {
        const { id, pens, roomName } = data;
        const room = roomStorage[roomName];
        for (let i = 0; i < room.users[id].length; i++) {
            for (let j = 0; j < pens.length; j++) {
                if (room.users[id][i].id === pens[j].id) {
                    room.users[id][i].html = pens[j].html;
                    room.users[id][i].css = pens[j].css;
                    room.users[id][i].js = pens[j].js;
                    room.users[id][i].title = pens[j].title;
                }
            }
        }
    });

    socket.on('pen.preview', (data) => {
        let destination;
        try {
            destination = data.roomName ||
                connectionMap.getSocket(data.userID) ||
                connectionMap.getSocket(data.pen.link.userID);
        } catch (e) {
            destination = undefined;
        }
        if (data.userID) {
            if (data.moderators) {
                socket.to(data.moderators).emit('pen.updatePreview', {
                    pen: data.pen,
                    positions: data.positions
                });
            }
            if (data.pen.link) {
                socket.to(connectionMap.getSocket(data.pen.link.userID)).emit('pen.updatePreview', {
                    pen: data.pen,
                    positions: data.positions
                })
            }
        }
        socket.to(destination).emit('pen.updatePreview', {
            pen: data.pen,
            positions: data.positions
        });
    });

    socket.on('pen.sharedCreated', (data) => {
        const { userID, penID } = data;
        const destination = connectionMap.getSocket(userID);
        socket.to(destination).emit('pen.sharedCreated', penID);
    });

    socket.on('pen.sharedDeleted', (data) => {
        const { userID, penID } = data;
        const destination = connectionMap.getSocket(userID);
        socket.to(destination).emit('pen.sharedDeleted', penID);
    });

    socket.on('assistant.promotion', (data) => {
        const { userID, users, assistants, roomName } = data;
        const socketID = connectionMap.getSocket(userID);
        socket.to(socketID).emit('assistant.promotion', {users, assistants});
        socket.to(`${roomName}_moderators`).emit('moderator.removeUser', {userID});
    });

    socket.on('assistant.beingPromoted', (data) => {
        const { roomName } = data;
        socket.join(`${roomName}_moderators`);
    });

    socket.on('assistant.degradation', (data) => {
        const { userID, roomName, information } = data;
        const socketID = connectionMap.getSocket(userID);
        socket.to(socketID).emit('assistant.degradation');
        socket.to(`${roomName}_moderators`).emit('moderator.addUser', {userID, information});
    });

    socket.on('assistant.beingDegraded', (data) => {
        const { roomName } = data;
        socket.leave(`${roomName}_moderators`);
    });

    socket.on('moderator.loadPen', (data) => {
        socket.to(getCreatorSocket(data.roomName)).emit('creator.isLinked', data);
    });

    socket.on('moderator.isLinked', (data) => {
        const { result, userID, pen, ownerID } = data;
        socket.to(connectionMap.getSocket(userID)).emit('moderator.linkResponse', {result, pen, ownerID});
    });

    socket.on('creator.linkEstablished', (data) => {
        const { id, pen, roomName } = data;
        socket.to(getCreatorSocket(roomName)).emit('creator.moderatorEstablishedLink', {id, pen});
    });

    socket.on('moderators.linkedPenChanged', (data) => {
        const { roomName, pen } = data;
        socket.to(`${roomName}_moderators`).emit('moderators.linkedPenChanged', {pen});
    });

    socket.on('creator.linkedPenChanged', (data) => {
        const { roomName, pen } = data;
        socket.to(getCreatorSocket(roomName)).emit('moderators.linkedPenChanged', {pen});
    });

    socket.on('preview.error', (data) => {
        const { userID, error } = data;
        const socketID = connectionMap.getSocket(userID);
        socket.to(socketID).emit('preview.error', error);
    });

    socket.on('user.ban', (data) => {
        const { roomName, userID } = data;
        socket.to(getCreatorSocket(roomName)).emit('user.ban', {userID});
    });
});

eventBus.on('event', (event) => {
    io.emit('event', event);
});
