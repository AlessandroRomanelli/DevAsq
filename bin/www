#!/usr/bin/env node

/**
 * Module dependencies.
 */

const debug = require('debug')('final-project:server');
const http = require('http');
const app = require('../app');
const eventBus = require('../pubsub');
const { socketToUser, userToSocket, roomStorage } = require('../rooms');
/**
 * Get port from environment and store in Express.
 */

const port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
 * Create HTTP server.
 */

const server = http.createServer(app);

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
    const port = parseInt(val, 10);

    if (isNaN(port)) {
    // named pipe
        return val;
    }

    if (port >= 0) {
    // port number
        return port;
    }

    return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
    if (error.syscall !== 'listen') {
        throw error;
    }

    const bind = typeof port === 'string'
        ? `Pipe ${port}`
        : `Port ${port}`;

    // handle specific listen errors with friendly messages
    switch (error.code) {
    case 'EACCES':
        console.error(`${bind} requires elevated privileges`);
        process.exit(1);
        break;
    case 'EADDRINUSE':
        console.error(`${bind} is already in use`);
        process.exit(1);
        break;
    default:
        throw error;
    }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
    const address = server.address();
    const bind = typeof address === 'string'
        ? `pipe ${address}`
        : `port ${address.port}`;
    debug(`Listening on ${bind}`);
}

/**
 * Web socket implementation
 */
const io = require('socket.io')(server);

function getCreatorSocket(roomName) {
    const room = roomStorage[roomName];
    if (!room) {
        console.error('No room found!');
        return;
    }
    return userToSocket.get(room.creator);
}

io.on('connection', (socket) => {
    console.log('client connected');
    socket.on('disconnect', () => {
        console.log('client disconnected');
    });

    socket.on('settings.bindID', (user) => {
        console.log(user);
        socketToUser.put(socket.id, user.id);
        userToSocket.put(user.id, socket.id);
    });

    socket.on('settings.joinRoom', (data) => {
        console.log(data.roomName);
        socket.join(data.roomName);
    });

    socket.on('settings.notifyCreator', (data) => {
        const { roomName, user } = data;
        const creatorSocket = getCreatorSocket(roomName);
        if (!creatorSocket) return;
        socket.to(creatorSocket).emit('settings.userJoined', user);
    });

    socket.on('creator.helpNeeded', (data) => {
        const { roomName, id } = data;
        const creatorSocket = getCreatorSocket(roomName);
        if (!creatorSocket) return;
        socket.to(creatorSocket).emit('creator.helpNeeded', id);
    });

    socket.on('creator.broadcastPen', (data) => {
        const { roomName, id, pen } = data;
        const creatorSocket = getCreatorSocket(roomName);
        if (!creatorSocket) return;
        socket.to(creatorSocket).emit('creator.updatePens', { id, pen });
    });

    socket.on('creator.switchPen', (data) => {
        const { roomName, id, newPen } = data;
        const creatorSocket = getCreatorSocket(roomName);
        if (!creatorSocket) return;
        socket.to(creatorSocket).emit('creator.switchPen', { id, newPen });
    });

    socket.on('creator.deletedPen', (data) => {
        const { roomName, id, pen } = data;
        const creatorSocket = getCreatorSocket(roomName);
        if (!creatorSocket) return;
        socket.to(creatorSocket).emit('creator.deletedPen', { id, pen });
    });

    socket.on('pen.change', (o) => {
        console.log('update the pen');
        console.log(o);
        const userID = socketToUser.get(socket.id);
        const room = roomStorage[o.roomName];
        if (room.creator === userID && o.pen.title === 'Public') {
            room.publicPen = o.pen;
            // let socketID = userToSocket.get(userID);
            socket.to(room.name).emit('pen.update', o.pen);
            return;
        }
        const pens = room.users[userID];
        const creatorSocket = userToSocket.get(room.creator);
        console.log(pens);
        for (let i = 0; i < pens.length; i++) {
            const pen = pens[i];
            if (pen.id === o.pen.id) {
                pens[i] = o.pen;
                if (pen.title !== 'Public') {
                    socket.to(creatorSocket).emit('creator.updatePens', { id: userID, pen: pens[i] });
                }
            }
        }
    });

    socket.on('pen.preview', (o) => {
        let destination = o.roomName || o.userID || userToSocket.get(o.pen.user);
        socket.to(destination).emit('pen.updatePreview', o.pen);
    });
});

eventBus.on('event', (event) => {
    io.emit('event', event);
});
